generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String    @id @default(cuid())
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model User {
  id                        String               @id @default(cuid())
  created_at                DateTime             @default(now())
  updated_at                DateTime             @default(now())
  deleted_at                DateTime?
  status                    Int?                 @default(1) @db.SmallInt
  approved_at               DateTime?
  availability              String?
  email                     String?              @unique
  username                  String?              @unique
  name                      String?              @db.VarChar(255)
  first_name                String?              @db.VarChar(255)
  last_name                 String?              @db.VarChar(255)
  password                  String?              @db.VarChar(255)
  domain                    String?              @unique
  avatar                    String?
  phone_number              String?
  country                   String?
  state                     String?
  local_government          String?
  city                      String?
  address                   String?
  zip_code                  String?
  gender                    String?
  date_of_birth             DateTime?            @db.Date
  billing_id                String?
  type                      String?              @default("user")
  email_verified_at         DateTime?
  is_two_factor_enabled     Int?                 @default(0)
  two_factor_secret         String?
  accounts                  Account[]
  analyzer_documents        AnalyzerDocument[]
  api_usages                ApiUsage[]
  creator_conversations     Conversation[]       @relation("creator")
  participant_conversations Conversation[]       @relation("participant")
  receiver_messages         Message[]            @relation("receiver")
  sender_messages           Message[]            @relation("sender")
  receiver_notifications    Notification[]       @relation("receiver")
  sender_notifications      Notification[]       @relation("sender")
  payment_transactions      PaymentTransaction[]
  role_users                RoleUser[]
  roles                     Role[]
  created_rules             Rule[]               @relation("rule_creator")
  updated_rules             Rule[]               @relation("rule_updater")
  subscriptions             Subscription[]
  support_messages          SupportMessage[]
  token_usages              TokenUsage[]
  ucodes                    Ucode[]
  notifications             UserNotification[]
  online_status             UserOnlineStatus?
  user_payment_methods      UserPaymentMethod[]
  user_settings             UserSetting[]
  user_supports             UserSupport[]

  @@map("users")
}

model Ucode {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  status     Int?      @default(1) @db.SmallInt
  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model Rule {
  id             String         @id @default(cuid())
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  deleted_at     DateTime?
  status         Int?           @default(1) @db.SmallInt
  title          String?
  description    String?
  usage_count    Int            @default(0)
  published_date DateTime?
  last_modified  DateTime       @default(now())
  created_by_id  String?
  updated_by_id  String?
  parent_id      String?
  is_draft       Boolean        @default(false)
  rule_analyses  RuleAnalysis[]
  created_by     User?          @relation("rule_creator", fields: [created_by_id], references: [id])
  parent_rule    Rule?          @relation("SubRules", fields: [parent_id], references: [id])
  sub_rules      Rule[]         @relation("SubRules")
  updated_by     User?          @relation("rule_updater", fields: [updated_by_id], references: [id])

  @@map("rules")
}

model Role {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  name             String?
  user_id          String?
  permission_roles PermissionRole[]
  role_users       RoleUser[]
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  role_id    String
  user_id    String
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model NotificationEvent {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  deleted_at    DateTime?
  status        Int?           @default(1) @db.SmallInt
  type          String?
  text          String?
  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id                    String             @id @default(cuid())
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  deleted_at            DateTime?
  status                Int?               @default(1) @db.SmallInt
  sender_id             String?
  receiver_id           String?
  notification_event_id String?
  entity_id             String?
  read_at               DateTime?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])
  receiver              User?              @relation("receiver", fields: [receiver_id], references: [id])
  sender                User?              @relation("sender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model UserPaymentMethod {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?
  user_id           String?
  payment_method_id String?
  checkout_id       String?
  user              User?     @relation(fields: [user_id], references: [id])

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id               String            @id @default(cuid())
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  deleted_at       DateTime?
  store_id         String?
  user_id          String?
  order_id         String?
  type             String?           @default("order")
  withdraw_via     String?           @default("wallet")
  provider         String?
  reference_number String?
  status           String?           @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?
  package_type     SubscriptionType?
  subscription_id  String?
  subscription     Subscription?     @relation(fields: [subscription_id], references: [id])
  user             User?             @relation(fields: [user_id], references: [id])

  @@map("payment_transactions")
}

model Message {
  id              String         @id @default(cuid())
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())
  deleted_at      DateTime?
  status          MessageStatus? @default(PENDING)
  sender_id       String?
  receiver_id     String?
  conversation_id String?
  attachment_id   String?
  message         String?
  attachment      Attachment?    @relation(fields: [attachment_id], references: [id])
  conversation    Conversation?  @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  receiver        User?          @relation("receiver", fields: [receiver_id], references: [id])
  sender          User?          @relation("sender", fields: [sender_id], references: [id])

  @@map("messages")
}

model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  name       String?
  type       String?
  size       Int?
  file       String?
  file_alt   String?
  messages   Message[]

  @@map("attachments")
}

model Conversation {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  creator_id     String?
  participant_id String?
  creator        User?     @relation("creator", fields: [creator_id], references: [id])
  participant    User?     @relation("participant", fields: [participant_id], references: [id])
  messages       Message[]

  @@map("conversations")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  deleted_at          DateTime?
  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  deleted_at    DateTime?
  category      String?
  label         String?
  description   String?
  key           String?       @unique
  default_value String?
  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  user_id    String?
  setting_id String?
  value      String?
  setting    Setting?  @relation(fields: [setting_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("user_settings")
}

model Subscription {
  id                   String               @id @default(cuid())
  created_at           DateTime             @default(now())
  updated_at           DateTime             @default(now())
  deleted_at           DateTime?
  status               Int?                 @default(1) @db.SmallInt
  type                 SubscriptionType
  price                Decimal
  currency             String               @default("USD")
  start_date           DateTime
  end_date             DateTime?
  is_active            Boolean              @default(false)
  billing_cycle        String?              @default("MONTHLY")
  auto_renew           Boolean              @default(true)
  trial_ends_at        DateTime?
  canceled_at          DateTime?
  user_id              String
  api_usages           ApiUsage[]
  payment_transactions PaymentTransaction[]
  user                 User                 @relation(fields: [user_id], references: [id])
  token_usages         TokenUsage[]

  @@map("subscriptions")
}

model AnalyzerDocument {
  id              String         @id @default(cuid())
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())
  deleted_at      DateTime?
  status          Int?           @default(1) @db.SmallInt
  user_id         String
  file_name       String
  file_path       String
  file_content    String
  type            String
  analysis_result String?
  user            User           @relation(fields: [user_id], references: [id])
  rule_analyses   RuleAnalysis[]

  @@map("analyzer_documents")
}

model RuleAnalysis {
  id          String           @id @default(cuid())
  created_at  DateTime         @default(now())
  updated_at  DateTime         @default(now())
  document_id String
  rule_id     String
  result      String
  document    AnalyzerDocument @relation(fields: [document_id], references: [id], onDelete: Cascade)
  rule        Rule             @relation(fields: [rule_id], references: [id])

  @@map("rule_analyses")
}

model TokenUsage {
  id              String        @id @default(cuid())
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now())
  deleted_at      DateTime?
  user_id         String
  subscription_id String?
  total_tokens    Int
  tokens_used     Int           @default(0)
  reset_date      DateTime
  subscription    Subscription? @relation(fields: [subscription_id], references: [id])
  user            User          @relation(fields: [user_id], references: [id])

  @@index([user_id, subscription_id])
  @@index([reset_date])
  @@map("token_usages")
}

model ApiUsage {
  id              String        @id @default(cuid())
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now())
  user_id         String
  input_tokens    Int           @default(0)
  output_tokens   Int           @default(0)
  total_tokens    Int           @default(0)
  estimated_cost  Decimal       @default(0) @db.Decimal(10, 4)
  date            DateTime      @default(now())
  subscription_id String?
  subscription    Subscription? @relation(fields: [subscription_id], references: [id])
  user            User          @relation(fields: [user_id], references: [id])

  @@index([user_id, date])
  @@index([subscription_id])
  @@map("api_usages")
}

model UserSupport {
  id              String           @id @default(cuid())
  created_at      DateTime         @default(now())
  updated_at      DateTime         @default(now())
  deleted_at      DateTime?
  status          SupportStatus    @default(OPEN)
  ticket_id       String           @unique
  subject         String
  description     String
  priority        String           @default("MEDIUM")
  user_id         String
  last_message_at DateTime         @default(now())
  messages        SupportMessage[]
  user            User             @relation(fields: [user_id], references: [id])

  @@map("user_supports")
}

model SupportMessage {
  id                String      @id @default(cuid())
  created_at        DateTime    @default(now())
  updated_at        DateTime    @default(now())
  content           String
  sender_id         String
  is_from_user      Boolean     @default(true)
  support_ticket_id String
  read              Boolean     @default(false)
  read_at           DateTime?
  sender            User        @relation(fields: [sender_id], references: [id])
  support_ticket    UserSupport @relation(fields: [support_ticket_id], references: [id])

  @@map("support_messages")
}

model UserNotification {
  id         String           @id @default(cuid())
  created_at DateTime         @default(now())
  updated_at DateTime         @default(now())
  deleted_at DateTime?
  user_id    String
  type       NotificationType
  message    String
  read       Boolean          @default(false)
  read_at    DateTime?
  data       Json?
  is_admin   Boolean          @default(false)
  user       User             @relation(fields: [user_id], references: [id])

  @@map("user_notifications")
}

model UserOnlineStatus {
  id        String   @id @default(cuid())
  user_id   String   @unique
  is_online Boolean  @default(false)
  last_seen DateTime @default(now())
  socket_id String?
  user      User     @relation(fields: [user_id], references: [id])

  @@map("user_online_statuses")
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

enum SubscriptionType {
  PAY_AS_YOU_GO
  BASIC
  PRO
  ENTERPRISE
}

enum TokenLimit {
  PAY_AS_YOU_GO
  BASIC
  PRO
  ENTERPRISE
}

enum SupportStatus {
  OPEN
  PENDING
  RESOLVED
}

enum NotificationType {
  SUBSCRIPTION_PURCHASED
  SUBSCRIPTION_EXPIRING
  PAYMENT_METHOD_ADDED
  PAYMENT_METHOD_REMOVED
  PAYMENT_FAILED
  SUPPORT_TICKET_CREATED
  SUPPORT_TICKET_UPDATED
  SUPPORT_RESPONSE
  ADMIN_NOTIFICATION
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_CANCELLED
}
